{
	"info": {
		"_postman_id": "3cde23e2-d02d-4bae-9f58-3e6530195568",
		"name": "Collector Tests",
		"description": "Colección de pruebas sobre el recurso Collector",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Crear un coleccionista",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"new_id_c\",data.id);",
							"tests[\"No genera error en el Post\"] = responseCode.code === 200;",
							"console.log(data.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Jaime Andrés Monsalve\",\n    \"telephone\": \"3102178976\",\n    \"email\": \"j.monsalve@gmail.com\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{ip}}/collectors",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"path": [
						"collectors"
					]
				},
				"description": "Crea un nuevo coleccionista. El Id es inicializado por la BD y se debe ver en la respuesta.\r\nPara la prueba, se guarda el id en una variable que será utilizada en otras peticiones de la colección.\r\n\r\n**Código http esperado: 200**\r\n\r\n**JSON de salida**\r\n\r\n```\r\n{\r\n    \"name\": \"Jaime Andrés Monsalve\",\r\n    \"telephone\": \"3102178976\",\r\n    \"email\": \"j.monsalve@gmail.com\",\r\n    \"id\": 1\r\n}\r\n```"
			},
			"response": []
		},
		{
			"name": "Crear un coleccionista 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"new_id_c2\",data.id);",
							"tests[\"No genera error en el Post\"] = responseCode.code === 200;",
							"console.log(data.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"María Alejandra Palacios\",\n    \"telephone\": \"3502889087\",\n    \"email\": \"j.palacios@outlook.es\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{ip}}/collectors",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"path": [
						"collectors"
					]
				},
				"description": "Crea un nuevo coleccionista. El Id es inicializado por la BD y se debe ver en la respuesta.\r\nPara la prueba, se guarda el id en una variable que será utilizada en otras peticiones de la colección.\r\n\r\n**Código http esperado: 200**\r\n\r\n**JSON de salida**\r\n\r\n```\r\n{\r\n    \"name\": \"María Alejandra Palacios\",\r\n    \"telephone\": \"3502889087\",\r\n    \"email\": \"j.palacios@outlook.es\",\r\n    \"id\": 2\r\n}\r\n```"
			},
			"response": []
		},
		{
			"name": "Obtener todos los coleccionistas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data= JSON.parse(responseBody);",
							"tests[\"No genera error en el Gell All\"] = responseCode.code === 200;",
							"tests[\"collectors count\"] = data.length >= 1;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{ip}}/collectors",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"path": [
						"collectors"
					]
				},
				"description": "Consulta todos los coleccionistas de la aplicacion. \r\n\r\nLa petición no tiene cuerpo.\r\n\r\nPara la prueba, se verifica que el conjunto de coleccionistas en la respuesta tenga mas de uno.\r\n\r\n**Código http esperado: 200**\r\n\r\n**Ejemplo de respuesta**\r\n\r\n```\r\n[\r\n    {\r\n        \"id\": 1,\r\n        \"name\": \"Jaime Andrés Monsalve\",\r\n        \"telephone\": \"3102178976\",\r\n        \"email\": \"j.monsalve@gmail.com\",\r\n        \"comments\": [],\r\n        \"favoritePerformers\": [],\r\n        \"collectorAlbums\": []\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"name\": \"María Alejandra Palacios\",\r\n        \"telephone\": \"3502889087\",\r\n        \"email\": \"j.palacios@outlook.es\",\r\n        \"comments\": [],\r\n        \"favoritePerformers\": [],\r\n        \"collectorAlbums\": []\r\n    }\r\n]\r\n```"
			},
			"response": []
		},
		{
			"name": "Obtener un coleccionista",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(responseBody);",
							"var data = JSON.parse(responseBody);",
							"tests[\"No genera error en el Get\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{ip}}/collectors/{{new_id_c}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"path": [
						"collectors",
						"{{new_id_c}}"
					]
				},
				"description": "Consulta un coleccionista de la aplicación.  \r\nLa petición no tiene cuerpo.\r\nSe envía el id del coleccionista deseado por la URL de la petición.\r\n\r\n**Código http esperado: 200**\r\n\r\n**Ejemplo de respuesta**\r\n\r\n```\r\n{\r\n    \"id\": 1,\r\n    \"name\": \"Jaime Andrés Monsalve\",\r\n    \"telephone\": \"3102178976\",\r\n    \"email\": \"j.monsalve@gmail.com\",\r\n    \"comments\": [],\r\n    \"favoritePerformers\": [],\r\n    \"collectorAlbums\": []\r\n}\r\n```"
			},
			"response": []
		},
		{
			"name": "Obtener un coleccionista que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"No se deberia obtener un coleccionista con un id que no existe\"] = responseCode.code === 404;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"The collector with the given id was not found\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{protocol}}://{{ip}}/collectors/0",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"path": [
						"collectors",
						"0"
					]
				},
				"description": "Consulta un coleccionista que no existe en la aplicación.  \r\n\r\nPara la prueba se verifica que se genera el error y el mensaje \"The collector with the given id was not found\".\r\n\r\n**Código http esperado: 404**\r\n\r\n**JSON de salida**\r\n\r\n```\r\n{\r\n    \"statusCode\": 404,\r\n    \"message\": \"The collector with the given id was not found\"\r\n}\r\n```"
			},
			"response": []
		},
		{
			"name": "Editar un coleccionista",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(responseBody);",
							"var data = JSON.parse(responseBody);",
							"tests[\"No genera error en el Put\"] = responseCode.code === 200;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Jaime Andrés Monsalve Ruiz\",\n    \"telephone\": \"3102178976\",\n    \"email\": \"j.monsalve@gmail.com\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{ip}}/collectors/{{new_id_c}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"path": [
						"collectors",
						"{{new_id_c}}"
					]
				},
				"description": "Actualiza un coleccionista existente. \r\nSe envía el Id en la URL de la petición.\r\n\r\n**Código http esperado: 200**\r\n\r\n**JSON de salida**\r\n\r\n```\r\n{\r\n    \"id\": 1,\r\n    \"name\": \"Jaime Andrés Monsalve Ruiz\",\r\n    \"telephone\": \"3102178976\",\r\n    \"email\": \"j.monsalve@gmail.com\"\r\n}\r\n```"
			},
			"response": []
		},
		{
			"name": "Editar un coleccionista que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"No se deberia actualizar un colleccionista con id que no existe\"] = responseCode.code === 404;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"The collector with the given id was not found\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Jaime Andrés Monsalve Ruiz\",\n    \"telephone\": \"3102178976\",\n    \"email\": \"j.monsalve@gmail.com\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{ip}}/collectors/0",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"path": [
						"collectors",
						"0"
					]
				},
				"description": "Actualiza un coleccionista que no existe. \r\n\r\nPara la prueba se verifica que se genera el error y el mensaje \"The collector with the given id was not found\".\r\n\r\n**Código HTTP esperado: 404**\r\n\r\n**JSON de salida**\r\n\r\n```\r\n{\r\n    \"statusCode\": 404,\r\n    \"message\": \"The collector with the given id was not found\"\r\n}\r\n```"
			},
			"response": []
		},
		{
			"name": "Borrar un coleccionista",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"No genera error en el Delete\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{ip}}/collectors/{{new_id_c}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"path": [
						"collectors",
						"{{new_id_c}}"
					]
				},
				"description": "Borra un coleccionista. Se envía el id del coleccionista creado anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		},
		{
			"name": "Borrar el coleccionista 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"No genera error en el Delete\"] = responseCode.code === 204;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{ip}}/collectors/{{new_id_c2}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"path": [
						"collectors",
						"{{new_id_c2}}"
					]
				},
				"description": "Borra un coleccionista. Se envía el id del coleccionista creado anteriormente.\n\n**Código HTTP esperado: 204**"
			},
			"response": []
		},
		{
			"name": "Borrar un coleccionista que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"No se deberia borrar un coleccionista con un id que no existe\"] = responseCode.code === 404;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"The collector with the given id was not found\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{ip}}/collectors/0",
					"protocol": "{{protocol}}",
					"host": [
						"{{ip}}"
					],
					"path": [
						"collectors",
						"0"
					]
				},
				"description": "Borra un coleccionista que no existe en la aplicación.  \r\n\r\nPara la prueba se verifica que se genera el error y el mensaje \"The collector with the given id was not found\".\r\n\r\n**Código http esperado: 404**\r\n\r\n**JSON de salida**\r\n\r\n```\r\n{\r\n    \"statusCode\": 404,\r\n    \"message\": \"The collector with the given id was not found\"\r\n}\r\n```"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}